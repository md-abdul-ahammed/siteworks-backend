// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // Connection pooling configuration for Supabase
  relationMode = "prisma"
}

model Customer {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String?
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  lastLoginAt DateTime?
  
  // Personal Information
  firstName   String
  lastName    String
  companyName String?
  phone       String?  @unique
  
  // Address Information
  countryOfResidence String
  addressLine1       String
  addressLine2       String?
  city               String
  postcode           String
  state              String? // For US states
  
  // Bank Details (will be console logged, not stored)
  accountHolderName  String?
  bankCode           String?
  accountNumber      String?
  accountType        String? // 'checking' or 'savings'
  preferredCurrency  String?
  
  // GoCardless Integration
  goCardlessCustomerId String? // GoCardless customer ID
  goCardlessBankAccountId String? // GoCardless customer bank account ID
  goCardlessMandateId  String? // GoCardless mandate ID
  mandateStatus        String? // active, pending_submission, submitted, active, failed, cancelled, expired
  
  // OpenPhone Integration
  openPhoneContactId   String? // OpenPhone contact ID
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  refreshTokens RefreshToken[]
  passwordResetTokens PasswordResetToken[]
  billingHistory BillingHistory[]
  receipts      Receipt[]

  @@map("customers")
}

model RefreshToken {
  id          String   @id @default(cuid())
  token       String   @unique
  customerId  String
  expiresAt   DateTime
  isRevoked   Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

model PasswordResetToken {
  id          String   @id @default(cuid())
  token       String   @unique
  customerId  String
  expiresAt   DateTime
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@map("password_reset_tokens")
}

model BillingHistory {
  id          String   @id @default(cuid())
  customerId  String
  goCardlessPaymentId String? // GoCardless payment ID
  zohoInvoiceId String? // Zoho invoice ID
  amount      Decimal  @db.Decimal(10, 2)
  currency    String   @default("GBP")
  status      String   // pending, paid, failed, cancelled
  description String?
  dueDate     DateTime?
  paidAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  receipts    Receipt[]
  
  @@map("billing_history")
}

model Receipt {
  id              String   @id @default(cuid())
  billingHistoryId String
  customerId      String
  goCardlessPaymentId String? // GoCardless payment ID
  zohoInvoiceId   String? // Zoho invoice ID
  fileName        String
  fileUrl         String? // Made optional since PDF might not be immediately available
  fileSize        Int? // in bytes
  mimeType        String @default("application/pdf")
  isDownloaded    Boolean @default(false)
  downloadedAt    DateTime?
  createdAt       DateTime @default(now())
  
  billingHistory  BillingHistory @relation(fields: [billingHistoryId], references: [id], onDelete: Cascade)
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@map("receipts")
}
